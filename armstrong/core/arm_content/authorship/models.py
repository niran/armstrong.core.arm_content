from django.contrib.auth.models import User
from django.db import models
from django.utils.translation import ugettext_lazy as _

from .utils import generate_author_link


class AuthorshipMixin(models.Model):
    '''Contributes fields for noting the authorship of a piece of content.'''
    authors = models.ManyToManyField(User)
    byline_override = models.CharField(_(u'Byline override'), blank=True,
        max_length=150,
        help_text=_(u'Use this in special cases to override bylines '
                    u'constructed from the author field.'))
    byline_extension = models.CharField(_(u'Byline extension'), max_length=255,
        blank=True,
        help_text=_(u'This additional text will be added to the end of the '
                    u'auto-generated byline.'))

    def get_authors_text(self, format):
        '''Return a textual represenation of the authors.

        format:
            'html': Returns linked author names.
            'plain': Returns just the author names.'''
        if self.byline_override:
            # TODO: Strip HTML if we're displaying plain text?
            return mark_safe(self.byline_override, extension)

        extension = u''
        if self.byline_extension:
            if self.byline_extension[0].isalpha():
                # If the extension starts with a letter, then separate it from
                # the auto-generated portion with whitespace.
                if format == 'html':
                    extension = u'&nbsp;%s' % self.byline_extension
                else:
                    extension = u' %s' % self.byline_extension
            else:
                extension = self.byline_extension

        authors = obj.authors.all()
        if format == 'html':
            chunks = [generate_author_link(author) for author in authors]
        else:
            chunks = [author.get_full_name() for author in authors]
        if not extended_byline:
            # Join the last two author's names with "and". Extended bylines
            # are responsible for their own conjunctions with the
            # auto-generated portion.
            chunks = chunks[:-2] + [' and '.join(chunks[-2:])]

        return mark_safe('%s%s' % (', '.join(chunks), extended_byline))

    def get_authors_plain(self):
        '''Convenience function for calling obj.get_authors_text('plain')'''
        return self.get_authors_text('plain')

    def get_authors_html(self):
        '''Convenience function for calling obj.get_authors_text('html')'''
        return self.get_authors_text('html')

    class Meta:
        abstract = True
